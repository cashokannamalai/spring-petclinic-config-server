apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My automation
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  Checkout:
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
  Build:
    needs: Checkout
    steps:
      - name: Configure git
        uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Build
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install
  UnitTest:
    needs: Build
    outputs:
      unitTestResults:  ${{ steps.RunUnitTest.outputs.mvn_test_stdio }}
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: RunUnitTest
        id: RunUnitTest
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn -q -Dsurefire.printSummary=false test > "$CLOUDBEES_OUTPUTS/mvn_test_stdio"
  StaticAnalysis:
    steps:
      - uses: cloudbees-io/sonarqube-sast-scan-code@v1
        name: Scan
        kind: scan
        with:
          server-url: https://sonarqube.cb-demos.io
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
          language: Java
      - uses: cloudbees-io/sonarqube-bundled-sast-scan-code@v2
        name: Scan with Java
        kind: scan
        with:
          language: JAVA
      - uses: cloudbees-io/findsecbugs-sast-scan-code@v1
        name: Scan with Find Security Bugs
        kind: scan
        with:
          language: LANGUAGE_JAVA
      - uses: sbatchelder-cba/sonarqube-cba@v0.0.3
        name: Scan GP
        with:
          project-key: config-server
          token: ${{ secrets.token }}
      - name: Fetch SonarQube Issues
        uses: docker://alpine/git:latest
        run: >
          apk add --no-cache curl jq

          curl -u ${{ secrets.username }}:${{ secrets.password }} \

          "https://sonarqube.cb-demos.io/api/issues/search?componentKeys=config-server&severities=BLOCKER,CRITICAL,MAJOR"
          \

          -o sonar-issues.json

          BLOCKER_COUNT=$(jq '[.issues[] | select(.severity=="BLOCKER")] |
          length' sonar-issues.json)

          CRITICAL_COUNT=$(jq '[.issues[] | select(.severity=="CRITICAL")] |
          length' sonar-issues.json)

          MAJOR_COUNT=$(jq '[.issues[] | select(.severity=="MAJOR")] | length'
          sonar-issues.json)

          echo "| Severity | Count |"

          echo "|----------|-------|"

          echo "| Blocker  | $BLOCKER_COUNT |"

          echo "| Critical | $CRITICAL_COUNT |"

          echo "| Major    | $MAJOR_COUNT |"
  ArtifactPublish:
    needs: UnitTest
    steps:
      - uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Publish to Nexus
        uses: docker://maven:3-eclipse-temurin-17
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: >
          mvn deploy \
            -DaltDeploymentRepository=nexus::default::https://${NEXUS_USERNAME}:${NEXUS_PASSWORD}@nexus.cb-demos.io/repository/Petclinic/
  DockerImageBuildAndPush:
    needs: ArtifactPublish
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Build Docker Image
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean install -DskipTests=true
      - name: Configure container registry credentials
        id: dockerconfig
        uses: cloudbees-io/configure-oci-credentials@v1
        with:
          registry: ${{ secrets.STAGING_DOCKER_REGISTRY }}
          username: ${{ secrets.STAGING_DOCKER_USERNAME }}
          password: ${{ secrets.STAGING_DOCKER_PASSWORD }}
      - name: Push image to OCI registry
        uses: cloudbees-io/kaniko@v1
        with:
          dockerfile: Dockerfile
          context: .
          destination: ${{ secrets.STAGING_DOCKER_REGISTRY }}/${{
            secrets.STAGING_DOCKER_USERNAME }}/configserver:3.2.4
  Approval:
    needs: DockerImageBuildAndPush
    type: manual-approval
    environment: ashok
    steps:
      - name: Approval
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          echo "Manual approval required before proceeding to deployment."
  SmokeTest:
    needs: Approval
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Smoke Test
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn test
  DeployInGKE:
    needs: SmokeTest
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - uses: cashokannamalai/kubeconfig@v1
        name: Set kubeconfig
        with:
          secname: ${{ secrets.kubeconfig }}
      - uses: docker://bitnami/kubectl:latest
        name: Deploy image
        shell: sh
        run: |
          kubectl apply -f /cloudbees/workspace/deployment-service.yaml
  CommitInfoStage:
    needs: DeployInGKE
    steps:
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Fetch SonarQube Metrics
        id: sonar-metrics
        uses: docker://alpine:latest
        run: >
          apk add --no-cache curl jq

          curl -u ${{ secrets.username }}:${{ secrets.password }} \

          "https://sonarqube.cb-demos.io/api/issues/search?componentKeys=config-server&severities=BLOCKER,CRITICAL,MAJOR,MINOR"
          \

          -o issues.json

          BLOCKER_COUNT=$(jq '[.issues[] | select(.severity=="BLOCKER")] |
          length' issues.json)

          CRITICAL_COUNT=$(jq '[.issues[] | select(.severity=="CRITICAL")] |
          length' issues.json)

          MAJOR_COUNT=$(jq '[.issues[] | select(.severity=="MAJOR")] | length'
          issues.json)

          MINOR_COUNT=$(jq '[.issues[] | select(.severity=="MINOR")] | length'
          issues.json)

          echo "| Severity | Count |" > sonar-metrics.md

          echo "|----------|-------|" >> sonar-metrics.md

          echo "| Blocker  | $BLOCKER_COUNT |" >> sonar-metrics.md

          echo "| Critical | $CRITICAL_COUNT |" >> sonar-metrics.md

          echo "| Major    | $MAJOR_COUNT |" >> sonar-metrics.md

          echo "| Minor    | $MINOR_COUNT |" >> sonar-metrics.md
      - name: Capture Commit Information
        id: commitinfo
        uses: docker://alpine/git:latest
        run: |
          COMMIT_ID=$(git rev-parse HEAD)
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          echo "## Commit Information" > commit-info.md
          echo "- Commit ID: $COMMIT_ID" >> commit-info.md
          echo "- Commit Message: $COMMIT_MSG" >> commit-info.md
          echo "## SonarQube Metrics" >> commit-info.md
          cat sonar-metrics.md >> commit-info.md
      - name: Configure Git
        uses: docker://alpine/git:latest
        run: |
          git config --global user.email "c_aannamalai@cloudbees.com"
          git config --global user.name "cashokannamalai"
      - name: Commit and Push Commit Info
        uses: docker://alpine/git:latest
        run: >
          git add commit-info.md sonar-metrics.md

          git commit -m "Add commit information and SonarQube metrics from
          workflow"

          git push
  Evidence:
    steps:
      - uses: cloudbees-io/publish-evidence-item@v1
        name: Publish evidence
        with:
          content: |
            - Workflow ID: ${{ cloudbees.run_id }}
            - URL: ${{ cloudbees.api.url }}
            - Unit Test Results: "${{ needs.UnitTest.outputs.unitTestResults }}"
            ## Commitinfo and SonarQube Quality
            -CommitId: ${{ secrets.Commitinfo }}

               ```markdown
            | Severity | Count |
            |----------|-------|
            | Blocker  | ${{ secrets.BLOCKER_COUNT }} |
            | Critical | ${{ secrets.CRITICAL_COUNT }} |
            | Major    | ${{ secrets.MAJOR_COUNT }} |
            ```

    needs:
      - CommitInfoStage
      - UnitTest
